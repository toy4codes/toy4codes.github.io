---
layout: post
title:  "When to use CSRF protection"
date:   2016-01-28 12:00:00
categories: spring-security-cross-site-request-forgery
---

When you use CSRF protection? Our recommendation is to use CSRF protection for any request that could be processed by a browser by normal users. If you are only creating a service that is used by non-browser clients, you will likely want to disable CSRF protection.

### CSRF protection and JSON

A common question is, but do I need to protect JSON requests made by javascript? The short answer is, it depends. However, you must be very careful as there are CSRF exploits that can impact JSON requests. For example, a malicious user can create a [CSRF with JSON](http://itsecurityconcepts.com/2014/04/22/csrf-on-json-requests/) using the following form:

{% highlight java %}
<form action="https://bank.example.com/transfer" method="post" enctype="text/plain">
  <input name='{"amount":100,"routingNumber":"evilsRoutingNumber","account":"evilsAccountNumber", "ignore_me":"' value='test"}' type='hidden'>
  <input type="submit"
      value="Win Money!"/>
</form>
{% endhighlight %}

This will produce the following JSON structure

{% highlight java %}
{ "amount": 100,
  "routingNumber": "evilsRoutingNumber",
  "account": "evilsAccountNumber",
  "ignore_me": "=test"
}
{% endhighlight %}

If an application were not validating the Content-Type, then it would be exposed to this exploit. Depending on the setup, a Spring MVC application that validates the Content-Type could still be exploited by updating the URL suffix to end with ".json" as shown below:

{% highlight java %}
<form action="https://bank.example.com/transfer.json" method="post" enctype="text/plain">
  <input name='{"amount":100,"routingNumber":"evilsRoutingNumber","account":"evilsAccountNumber", "ignore_me":"' value='test"}' type='hidden'>
  <input type="submit"
      value="Win Money!"/>
</form>
{% endhighlight %}

### CSRF and Stateless Browser Applications

What if my application is stateless? That doesn’t necessarily mean you are protected. In fact, if a user does not need to perform any actions in the web browser for a given request, they are likely still vulnerable to CSRF attacks.

For example, consider an application uses a custom cookie that contains all the state within it for authentication instead of the JSESSIONID. When the CSRF attack is made the custom cookie will be sent with the request in the same manner that the JSESSIONID cookie was sent in our previous example.

User’s using basic authentication are also vulnerable to CSRF attacks since the browser will automatically include the username password in any requests in the same manner that the JSESSIONID cookie was sent in our previous example.
