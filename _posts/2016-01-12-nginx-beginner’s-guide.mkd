---
layout: post
title:  "Nginx Beginner’s Guide"
date:   2016-01-12 12:00:00
categories: nginx
---

nginx has one master process and several worker processes. The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. nginx employs event-based model and OS-dependent mechanisms to efficiently distribute requests among worker processes. The number of worker processes is defined in the configuration file(worker_processes) and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores.

The way nginx and its modules work is determined in the configuration file. By default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx. 

### Installing nginx

building nginx from sources : [http://nginx.org/en/docs/configure.html](http://nginx.org/en/docs/configure.html)

download [openssl](https://www.openssl.org) source code 

download [RCRE](http://www.pcre.org/) source code

download [zlib](http://zlib.net/) source code 

{% highlight java %}
./configure
    --prefix=/usr/local/nginx
    --sbin-path=/usr/local/nginx/sbin/nginx
    --conf-path=/usr/local/nginx/conf/nginx.conf
    --pid-path=/usr/local/nginx/logs/nginx.pid
    --error-log-path=/usr/local/nginx/logs/error.log
    --http-log-path=/usr/local/nginx/logs/access.log
    --with-http_ssl_module
    --with-openssl=../openssl-1.0.1f
    --with-pcre=../pcre-8.40
    --with-zlib=../zlib-1.2.11
{% endhighlight %}

![configure nginx](/images/configure-nginx.png)

You should install C++ compiler before install nginx:

> sudo apt-get install g++

> sudo make install 

![install nginx](/images/nginx-install.png)

### Enable, Disable nginx automatically starts

> sudo update-rc.d -f nginx enable

> sudo update-rc.d -f nginx disable

### Starting, Stopping, and Reloading Configuration

To start nginx, run the executable file. Once nginx is started, it can be controlled by invoking the executable with the -s parameter. Use the following syntax: 

> nginx -s signal

Where signal may be one of the following: 

- stop — fast shutdown
- quit — graceful shutdown
- reload — reloading the configuration file
- reopen — reopening the log files

For example, to stop nginx processes with waiting for the worker processes to finish serving current requests, the following command can be executed: 

> nginx -s quit

This command should be executed under the same user that started nginx.

Changes made in the configuration file will not be applied until the command to reload configuration is sent to nginx or it is restarted. To reload configuration, execute: 

> nginx -s reload

Once the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file and tries to apply the configuration provided in it. If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit.

### Configuration File’s Structure

nginx consists of modules which are controlled by directives specified in the configuration file. Directives are divided into simple directives and block directives. A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;). A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional instructions surrounded by braces ({ and }). If a block directive can have other directives inside braces, it is called a context (examples: events, http, server, and location). 

Directives placed in the configuration file outside of any contexts are considered to be in the main context. The events and http directives reside in the main context, server in http, and location in server.

The rest of a line after the # sign is considered a comment. 

### Serving Static Content

Depending on the request, files will be served from different local directories: /data/www (which may contain HTML files) and /data/images (containing images).

Generally, the configuration file may include several server blocks distinguished by ports on which they listen to and by server names. Once nginx decides which server processes a request, it tests the URI specified in the request’s header against the parameters of the location directives defined inside the server block. 

The "location /" block specifies the “/” prefix compared with the URI from the request. For matching requests, the URI will be added to the path specified in the root directive, that is, to /data/www, to form the path to the requested file on the local file system. If there are several matching location blocks nginx selects the one with the longest prefix. The "location /" block provides the shortest prefix, of length one, and so only if all other location blocks fail to provide a match, this block will be used.

The "location /images/" block will be a match for requests starting with /images/ (location / also matches such requests, but has shorter prefix).

The resulting configuration of the server block should look like this: 

{% highlight java %}
server {
    listen      80;
    server_name localhost;
    location / {
        root /data/www;
    }

    location /images/ {
        root /data;
    }
}
{% endhighlight %}

This is already a working configuration of a server that listens on the standard port 80 and is accessible on the local machine at http://localhost/. In response to requests with URIs starting with /images/, the server will send files from the /data/images directory. For example, in response to the http://localhost/images/example.png request nginx will send the /data/images/example.png file. If such file does not exist, nginx will send a response indicating the 404 error. Requests with URIs not starting with /images/ will be mapped onto the /data/www directory. For example, in response to the http://localhost/some/example.html request nginx will send the /data/www/some/example.html file.

### Setting Up a Simple Reverse Proxy Server

The configuration of a reverse-proxy server will look like this: 

{% highlight java %}
server {
    listen      80;
    server_name localhost;
    location / {
        proxy_pass http://localhost:8080/;
    }

    location ~ .(gif|jpg|png)$ {
        root /data/images;
    }
}
{% endhighlight %}

A regular expression should be preceded with ~, the above parameter is a regular expression matching all URIs ending with .gif, .jpg, or .png.

When nginx selects a location block to serve a request it first checks location directives that specify prefixes, remembering location with the longest prefix, and then checks regular expressions. If there is a match with a regular expression, nginx picks this location or, otherwise, it picks the one remembered earlier. 

#### forwarding-proxy VS reverse-proxy

![forwarding proxy](/images/forwarding-proxy.png) ![reverse proxy](/images/reverse-proxy.png)

















