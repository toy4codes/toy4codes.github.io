---
layout: post
title:  "$( document ).ready()"
date:   2017-04-21 12:00:00
categories: jquery-beginner-guide
---

A page can't be manipulated safely until the document is "ready." jQuery detects this state of readiness for you. Code included inside $( document ).ready() will only run once the page Document Object Model (DOM) is ready for JavaScript code to execute. Code included inside $( window ).on( "load", function() { ... }) will run once the entire page (images or iframes), not just the DOM, is ready.

{% highlight java %}
// A $( document ).ready() block.
$( document ).ready(function() {
    console.log( "ready!" );
});
{% endhighlight %}

Experienced developers sometimes use the shorthand $() for $( document ).ready(). If you are writing code that people who aren't experienced with jQuery may see, it's best to use the long form.

{% highlight java %}
// Shorthand for $( document ).ready()
$(function() {
    console.log( "ready!" );
});
{% endhighlight %}

You can also pass a named function to $( document ).ready() instead of passing an anonymous function.

{% highlight java %}
// Passing a named function instead of an anonymous function.
function readyFn( jQuery ) {
    // Code to run when the document is ready.
}
$( document ).ready( readyFn );
// or:
$( window ).on( "load", readyFn );
{% endhighlight %}

The example below shows $( document ).ready() and $( window ).on( "load" ) in action. The code tries to load a website URL in an <iframe> and checks for both events:

{% highlight java %}
<html>
<head>
    <script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script>
    $( document ).ready(function() {
        console.log( "document loaded" );
    });
 
    $( window ).on( "load", function() {
        console.log( "window loaded" );
    });
    </script>
</head>
<body>
    <iframe src="http://techcrunch.com"></iframe>
</body>
</html>
{% endhighlight %}

### $ vs $()

Until now, we've been dealing entirely with methods that are called on a jQuery object. For example:

{% highlight java %}
$( "h1" ).remove();
{% endhighlight %}

Most jQuery methods are called on jQuery objects as shown above; these methods are said to be part of the $.fn namespace, or the "jQuery prototype," and are best thought of as jQuery object methods.

However, there are several methods that do not act on a selection; these methods are said to be part of the jQuery namespace, and are best thought of as core jQuery methods.

This distinction can be incredibly confusing to new jQuery users. Here's what you need to remember:

> Methods called on jQuery selections are in the $.fn namespace, and automatically receive and return the selection as this.

> Methods in the $ namespace are generally utility-type methods, and do not work with selections; they are not automatically passed any arguments, and their return value will vary.

There are a few cases where object methods and core methods have the same names, such as $.each() and .each(). In these cases, be extremely careful when reading the documentation that you are exploring the correct method.

In this guide, if a method can be called on a jQuery selection, we'll refer to it just by its name: .each(). If it is a utility method -- that is, a method that isn't called on a selection -- we'll refer to it explicitly as a method in the jQuery namespace: $.each().
