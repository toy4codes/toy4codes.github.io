---
layout: post
title:  "Git"
date:   2017-06-08 12:00:00
categories: git
---

# What is version control? 

The VCSs solve one of the most common problems of software development: the fear for changing the software.  A VCS will help you to get rid of being scared about changing your code.

# What is Git?

Git is a distributed version control system (DVCS), also known as decentralized. This means that every developer has a full
copy of the repository.

# Git vs SVN (DVCS vs CVCS)

### Centralized Version Control Systems (Subversion)

![centralized-version-control](/images/centralized-version-control.png)

### Distributed Version Control Systems (Git)

![distributed-version-control](/images/distributed-version-control.png)

### Storing data as changes to a base version of each file (Subversion)

![deltas](/images/deltas.png)

### Storing data as snapshots of the project over time (Git)

![snapshots](/images/snapshots.png)

# Download and install Git

### Linux

```
sudo apt-get update
sudo apt-get install git
```

# Git Usage

### Creating a repository

```
git init
```

### Staging

```
git add
```

Files are added to the index. The Git index is where the data that is going to be saved in the commit is stored temporarily, until the commit is done.

### Commits

```
git commit -m "comment"
```

A commit is a full snapshot of the repository, that is saved in the database.

### Hash

Git identifies each commit uniquely using SHA1 hash function, based on the contents of the committed files. So, each commit is identified with a 40 character-long hexadecimal string, like the following.

```
de5aeb426b3773ee3f1f25a85f471750d127edfe
```

Take into account that the commit message, commit date, or any other variable rather than the committed files’ content (and size), are not included in the hash calculation.

### History

### Branch

### Merge

##### Knowing in advance which version to stay with

It may happen that we know beforehand which version we want to choose in case of conflicts. In these cases, we can tell Git which version use, to make it apply it directly.

To do this, we have to pass the -X option to merge, indicating which version use:

```
git merge -X <ours|theirs> <branch-name>
```

So, for using HEAD version, we would have to use ours option; instead, for using the version that is not HEAD’s, theirs has to be passed.

##### Fast-forward

When we are merging branches, is always advisable not to use the fast-forward mode. This is achieved passing --noff flag while merging, since the history is reflected as it is actually is. The no fast-forward mode should be always used.

```
git merge --no-ff branch-name
```

### Diff

##### Differences between exact points in history

```
git diff <original>..<modified> # hashcode/branch-name/HEAD/tags
```

### Tag

```
git tag -a <tag-name> -m "comment"
```

### Undoing

##### Modifying the last commit

```
git commit --amend -m "comment"
```

##### Discard changes in working directory

```
git checkout -- <file>
```

##### How to unstage files

```
git reset HEAD <file>
```

##### Deleting commits

That is, if you make a soft reset, the commit(s) will be removed, but the modifications saved in that/those commit(s) will remain; and a hard reset, won't leave change made in the commit(s). If no flag is specified, the reset will be done softly.

```
git reset [--hard|--soft] HEAD^ # First parent of the current branch
git reset [--hard|--soft] HEAD~n
```

# Resources

[Git Pro](https://git-scm.com/book/en/v2)

[Git Reference](https://git-scm.com/docs)







